AWSTemplateFormatVersion: 2010-09-09
Description: Laravel template
Parameters:
  AvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
  EnvironmentType:
    Description: Specify the Environment type of the stack.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  KeyPairName:
    Description: EC2 SSH Keypair
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  DBInstanceIdentifier:
    Type: String
    Default: webapp-db
  DBUsername:
    NoEcho: 'true'
    Description: Username for Postgresql database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: postgres
  DBPassword:
    NoEcho: 'true'
    Description: Password for Postgresql database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.
    Default: postgres
Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t3.nano
    test:
      InstanceType: t3.micro
    prod:
      InstanceType: t3.small
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 71430398-eca7-4fcc-9073-9ea75f4be5e1
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: AZ
          Value: !Select 
            - 0
            - !GetAZs ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 93e698ad-8370-4af1-af89-0c39eff985b1
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
        - Key: AZ
          Value: !Select 
            - 0
            - !GetAZs ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8e91ba75-68d1-448a-a0de-f5b2af3e07c9
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bc1068d4-6fc8-4fc3-ac26-2d94cf5f98b9
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b25964cf-f502-452a-a559-64e75dd717ce
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ebfc4bff-d98d-4dd9-bca5-dd8cfa5a57a2
  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Metadata:
      'AWS::CloudFormation::Designer':
        id: acbc4a82-277a-4c01-ba3f-bc791428c002
  SubnetRouteTableAssociationAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-00c5331644ad576ad
      InstanceType: t3.nano
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-BastionInstance'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 68f5f901-b58a-4a4e-8d53-8c6acb038330
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Security group for ${AWS::StackName} bastion host'
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e2cbc7ad-34d5-4762-acda-046c98e26e6a
  BastionAllowInboundSSHFromInternet:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  BastionAllowOutboundSSHToApplication:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref ApplicationSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1a9c7019-60bb-4c18-b1d9-d3afbac9a35a
  ApplicationInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: ami-00c5331644ad576ad
      InstanceType: !FindInMap 
        - EnvironmentToInstanceType
        - !Ref EnvironmentType
        - InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      SubnetId: !Ref PrivateSubnet
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash

          apt update -y


          # install nginx

          apt install -y nginx


          # install git

          apt install -y git


          # install ansible

          apt install -y ansible


          # clone ansible ubuntu cis template

          git clone https://github.com/akramab/ubuntu-cis-ansible


          # run ansible cis template

          ansible-playbook -i host ./ubuntu-cis-ansible/run.yaml


          # install wazuh

          curl -so wazuh-agent-4.3.2.deb
          https://packages.wazuh.com/4.x/apt/pool/main/w/wazuh-agent/wazuh-agent_4.3.2-1_amd64.deb
          && sudo WAZUH_MANAGER='52.77.133.120'
          WAZUH_REGISTRATION_PASSWORD='W@zuh&P@arg0n!'
          WAZUH_AGENT_GROUP='default' dpkg -i ./wazuh-agent-4.3.2.deb


          # start server

          systemctl daemon-reload

          systemctl enable wazuh-agent

          systemctl start wazuh-agent

          
          # configuring nginx
          unlink /etc/nginx/sites-available/default

          touch /etc/nginx/sites-available/myserver.config

          >> /etc/nginx/sites-available/myserver.config cat <<EOF
          server{
              listen 80;
              server_name wach.quest;
              location / {
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $host;
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  # location /overview {
                  #     proxy_pass http://127.0.0.1:3000$request_uri;
                  #     proxy_redirect off;
                  # }
              }
          }
          EOF

          ln -s /etc/nginx/sites-available/myserver.config /etc/nginx/sites-enabled/

          systemctl enable nginx

          systemctl start nginx

          ufw allow 'Nginx HTTP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a5e7a51-a468-4041-9785-e117ed7f190b
  ApplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Internal Security group for ${AWS::StackName}'
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 43c0480a-3118-4905-9ef9-a9f8fe194013
  ApplicationAllowInboundSSHFromBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ApplicationSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3a492322-e315-4132-8537-6b22079fb82e
  DBEC2:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
        Fn::GetAtt:
          - DBEC2SecurityGroup
          - GroupId
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - webapp-rds
              - !Ref EnvironmentType
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fa0dfb62-8b5c-4ec5-bc7e-523ee1227b03
  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join 
        - '-'
        - - webapp-db-security-group
          - !Ref EnvironmentType
      GroupDescription: Allow postgres inbound traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId:
            Fn::GetAtt:
              - ApplicationSecurityGroup
              - GroupId
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - webapp-db-security-group
              - !Ref EnvironmentType
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7be8f8a8-b71b-4eda-b9fc-72ee4ababbb9
Outputs:
  BastionPublicIp:
    Description: Bastion Public IP
    Value: !Sub 'http://${BastionInstance.PublicIp}'
    Export:
      Name: BastionPublicIp
  ApplicationPrivateIp:
    Description: Application Private IP
    Value: !Sub 'http://${ApplicationInstance.PrivateIp}'
    Export:
      Name: ApplicationPrivateIp
  WebAppDatabaseEndpoint:
    Description: Connection endpoint for the database
    Value: !GetAtt DBEC2.Endpoint.Address
